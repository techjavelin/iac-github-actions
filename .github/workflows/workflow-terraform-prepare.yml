---
name: techjavelin/iac-github-actions // terraform // prepare

on: 
  workflow_call:
    inputs:
      runner:
        description: "Where the job should run (e.g. 'self-hosted', 'ubuntu-latest', etc)"
        required: true
        default: 'ubuntu-latest'
        type: string

      source-dir:
        description: "Absolute path or relative path from project root to where your terraform files are"
        required: false
        default: '.'
        type: string

      cache-key:
        description: "Will use a cached version of the source-dir if found"
        required: false
        type: string

    outputs:
      plan:
        description: "The output of `terraform plan`"
        value: ${{ jobs.plan.outputs.plan }}

      result:
        description: "The plan Outcome"
        value: ${{ jobs.plan.outputs.result }}

      artifact:
        description: "The plan artifact to be provided to terraform apply"
        value: ${{ jobs.plan.outputs.artifact }}

jobs:
  plan:
    name: terraform // prepare // plan
    runs-on: ${{ inputs.runner }}

    defaults:
      run:
        working-directory: ${{ inputs.source-dir }}

    outputs:
      result: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}
      artifact: ${{ steps.plan.outputs.artifact }}

    env:
      artifact_name: ${{ github.sha }}-${{ github.run_id }}-${{ github.run_number }}.tfplan

    steps:
      - name: terraform // prepare // checkout
        uses: actions/checkout@v3

      - name: terraform // prepare // cache
        uses: actions/cache@v3
        with:
          path: ${{ inputs.source-dir }}
          key: ${{ inputs.cache-key }}
        if: ${{ inputs.cache-key != '' }}

      - run: ls -aslrth

      - name: terraform // prepare // setup
        uses: hashicorp/setup-terraform@v2

      - name: terraform // prepare // init
        id: init
        run: terraform -chdir=${{ inputs.source-dir }} init

      - name: terraform // prepare // plan
        id: plan
        run: |
          terraform -chdir=${{ inputs.source-dir }} plan -out=${{ env.artifact_name }} -no-color
          echo "artifact=${{ env.artifact_name }} >> $GITHUB_OUTPUT"
          echo "Generated Terraform Plan Successfully to `${{ env.artifact_name }} >> $GITHUB_STEP_SUMMARY"
      
      - name: terraform // prepare // upload        
        uses: actions/upload-artifact@v3
        id: upload
        with:
          name: terraform-plan
          path: ${{ env.artifact_name }}